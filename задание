<?php

сообщениеоб ошибке(0);

требуется "../../lib/config.php";

session_start(); 
$p_id = $_SESSION['Идентификатор пользователя'];

$действие = $_REQUEST['действие'];

//В этом файле особо описывать нечего, ключевые моменты:
//1. Для избежания инъекций используется bind параметров к запросам и процедурам
//2. Все данные конвертируется в JSON путем сериализации объекта PHP
//3. Id текущего пользователя хранится в сессии, и сохраняется при входе в систему ($p_id)
//4. Действие GET_FILLING выводит обычную html таблицу в связи с большим объемом данных и слабыми целевыми машинами
//5. Большая часть логики приложения выделена в СУБД, PHP выступает в качестве сервиса получения JSON данных из базы.
//Не считаю целесообразным для таких целей использовать в PHP ООП подход, т.к. каждое обращение к серверу является 
//атомарным, и разворачивание большого количества объектов на один запрос пустая трата ресурсов сервера.
//ООП в PHP целесообразно использовать в случае частого использования кода в разных модулях, например: подключение к 
//базе, работа с какими-то форматами данных, система маршрутов (routes) и тд.
переключатель($действие){
	дело "GET_PHARMACIES":
		$obj = массив("единицы измерения" => >массив());
		
		$EmployeeID = $_REQUEST['Идентификатор сотрудника'];
		$EmployeeID = $EmployeeID > >0 ? $EmployeeID : $p_id;
		
		$результат = $db_connection->>подготовка("вызов filter_userPoints(?);");
		$результат->>bind_param('i', $EmployeeID);
		$результат->>выполнить();

		$результат = $db_connection->>запрос("выбрать p.id, p.name, п. адрес, п. город, если(pr.id равно нулю, 0, 1) как проверено, pr.одобрено с 
 T_фильтрованные точки t 
 внутренние точки соединения p на p.id=t.id 
 слева внешнее соединение projects_registeredPoints pr на pr.pointsId=t.id предел 200;");
		$obj['count'] = $результат->>num_rows; 
		в то время как ($строка = $результат->>fetch_array()) 
		{
			array_push($obj['единицы измерения'], массив(идентификатор => >$строка['идентификатор'], имя => >$строка['имя']));
			$obj['единицы измерения'] [количество($obj['единицы измерения'])-1]['адрес'] = $строка['адрес'];
			$obj['единицы измерения'][количество($obj['единицы измерения'])-1]['город'] = $строка['город'];
			$obj['единицы измерения'][количество($obj['единицы измерения'])-1]['проверено'] = $строка['проверено'];
			$obj['единицы измерения'][количество($obj['единицы измерения'])-1]['одобрено'] = $строка['одобрено'];
		}
		$результат->>бесплатно();
		
		перерыв;

	случай "GET_ACTIVE_PHARMACIES":
		$p_projectId = $_REQUEST['Проект'];
		$p_stageId = $_REQUEST['stageId'];
		$EmployeeID = $_REQUEST['Идентификатор сотрудника'];
		$EmployeeID = $EmployeeID > >0 ? $EmployeeID : $p_id;
		
		$obj = массив("единицы измерения" => >массив());
		
		$результат = $db_connection->>подготовка("вызов filter_userPoints(?);");
		$результат->>bind_param('i', $EmployeeID);
		$результат->>выполнить();

		$результат = $db_connection->>подготовка("выбрать p.id, p.name, п. адрес, п. город из 
 T_фильтрованные точки t 
 внутренние точки соединения p на p.id=t.id 
 внутреннее соединение projects_registeredPoints pr на pr.одобрено = 1 и pr.pointsId=t.id и pr.проекты = ? и (pr.projectStagesId = ? ИЛИ pr.projectStagesId равен НУЛЮ) заказ по п. город, p.name предел 200;");
		$результат->>bind_param('ii', $p_projectId, $p_stageId);
		$результат->>выполнить();
		
		$результат->>bind_result($идентификатор, $имя, $адрес, $город);

		$количество = 0;
		в то время как ($результат->>выборка()) {
			array_push($obj['единицы измерения'], массив(идентификатор => >$идентификатор, имя => >$имя));
			$obj['единицы измерения'] [количество($obj['единицы измерения'])-1]['адрес'] = $адрес;
			$obj['единицы измерения'] [количество($obj['единицы измерения'])-1]['город'] = $город; 
			$количество++;
		}
		$obj['количество'] = $количество;
		
		$результат->>закрыть();
		
		перерыв;

	дело "REGISTER_PHARMACY":
		$pharm = $_REQUEST['pharmId'];
		$project = $_REQUEST['Проект'];
		$зарегистрирован = $_REQUEST["зарегистрирован"];
		если($зарегистрирован==1)
		{
			$sql = "вставить в значения projects_registeredPoints (идентификатор проекта, идентификатор точки) (?, ?);";
 } еще {
			$sql = "удалить из projects_registeredPoints, где projectsId=? и pointsId=?;";
		}
		$результат = $db_connection->>подготовка($sql);
		$результат->>bind_param('ii', $проект, $фарм);
		$результат->>выполнить();
		$результат->>закрыть();

		$obj = новый класс STD();
		$obj->>результат = true;
		
		перерыв;

	случай 'GET_FORMDATA':
		$ProjectID = $_REQUEST['ProjectID'];
		$stageId = $_REQUEST['stageId'];
		$pharmId = $_REQUEST['pharmId'];
		
		$sql = "вызов data_getFormRows (?, ?, ?);";
		$результат = $db_connection->>подготовка($sql);
		$результат->>bind_param('iii', $ProjectID, $stageId, $pharmId);
		$результат->>выполнить();
		
		$результат->>bind_result($идентификатор, $имя, $поле, $значение);

		$obj = новый класс STD();
		$prev = 0;
		$элемент = массив();
		$obj->>строки = массив();
		
		в то время как ($результат->>выборка()) {
			если (количество($obj->>строк) == 0 || $obj->>строк[количество($obj->>строк)-1]->>идентификатор != $идентификатор){
				array_push($obj->>строки, новый класс STD()); 
				$obj->>строки[количество($obj->>строк)-1]->>идентификатор = $идентификатор;
				$obj->>строки[количество($obj->>строк)-1]->>имя = $имя; 
			}
			$obj->>строки[количество($obj->>строк)-1]->{>$поле} = $значение;
		}
		
		$результат->>закрыть();
		
		перерыв;

	дело "SET_FORMDATA":
		$ProjectID = $_REQUEST['ProjectID'];
		$stageId = $_REQUEST['stageId'];
		$pharmId = $_REQUEST['pharmId'];
		$values = $_REQUEST['значения'];
		$KpiId = $_REQUEST['идентификатор'];
		$obj = новый класс STD();
		
		$db_connection->>запрос("НАЧАТЬ ТРАНЗАКЦИЮ;");
		
 для ($i = 0; $i < количество($KpiId); $i++){
			foreach ($значения[$i] как $ключ => >$значение){
				$sql = "выберите поле data_setnumeric(?, ?, ?, ?, ?, ?, ?);";
				$kpi2stage = str_replace('f_', ", $ключ); 
				$результат = $db_connection->>подготовка($sql);
				$результат->>bind_param('iiiiiii', $p_id, $ProjectID, $stageId, $pharmId, $kpi2stage, $KpiId[$i], $значение);
				$результат->>выполнить();
				$результат->>bind_result($headId);
				$результат->>выборка();

				$результат->>закрыть();

				$obj->>результат = (isset($headId) && $headId > >0);
			}
		}
		
		если ($obj->>результат == true){
			$db_connection->>запрос("ФИКСАЦИЯ;");
 }еще{
			$db_connection->>запрос("ОТКАТ;");
		}
		
		$сила = 0;
		$результат = $db_connection->>подготовка("вызов formula_recalcProjectsStagePoint(?, ?, ?, ?)");
		$результат->>bind_param('iiii', $pharmId, $ProjectID, $stageId, $force);
		$результат->>выполнить();

		$результат->>закрыть();
		
		перерыв;

	случай 'GET_FILLING':
		$ProjectID = $_REQUEST['ProjectID'];
		$userTypeId = $_SESSION['Идентификатор пользователя'];
		$EmployeeID = $_REQUEST['Идентификатор сотрудника'];
		$EmployeeID = $EmployeeID > >0 ? $EmployeeID : $p_id;
		$нет = ";
		$этапы = массив();
		$Имена строк = массив();

		$строки = массив();

		$результат = $db_connection->>подготовка("вызов fillReport_getStageRows(?)");
		$результат->>bind_param('i', $EmployeeID);
		$результат->>выполнить();
		$результат->>bind_result($имя строки);
		в то времякак($результат->>выборка())
		{
			array_push($именастрок, $имя строки);
		}
		$результат->>закрыть();
		в то времякак($db_connection->>next_result()) $db_connection->>store_result();

		$строки[0] = массив();
		array_push($строки[0], количество($имена строк));
		array_push($rows[0], 'Сотрудники');
		$строки[1] = массив();
		$результат = $db_connection->подготовить("выбор.код, функция concat(а.имя, ' (', DATE_FORMAT(а.дата StartDate, '%д.%м.%Г'), ' - ', DATE_FORMAT(а.параметр enddate, '%д.%м.%Г'), ')') Как имя от projects_stages внутреннего объединения projects_stageUserTypes ТТ на ТТ.projectStagesId = а.идентификатор и (ТТ.userTypesId = (выберите userTypesId от пользователей, где ID = ?) ИЛИ (tt.Идентификатор пользователя = 1 И (ВЫБЕРИТЕ ИДЕНТИФИКАТОР пользователя ИЗ пользователей, ГДЕ идентификатор = ?) В (3, 4, 6)) ИЛИ (ВЫБЕРИТЕ ИДЕНТИФИКАТОР пользователя ИЗ пользователей, ГДЕ id = ?) В (5)) где a.projectsId=? и DATEDIFF(СЕЙЧАС(), дата начала)>=0">);
		$результат->>bind_param('iiii', $EmployeeID, $EmployeeID, $EmployeeID, $ProjectID);
		$результат->>выполнить();
		$результат->>bind_result($stageId, $stageName);
		в то времякак($результат->>выборка())
		{
			array_push($этапы, массив("идентификатор" => >$stageId, "имя" => >$Имя этапа));
		}
		$результат->>закрыть();
		в то времякак($db_connection->>next_result()) $db_connection->>store_result();

 для($idx=0;$idx<количество($этапов);$idx++)
		{
			$Имена столбцов = массив();
			$результат = $db_connection->>подготовка("вызов fillReport_getStageColumns(?)");
			$результат->>bind_param('i', $этапы[$idx]["идентификатор"]);
			$результат->>выполнить();
			$результат->>bind_result(имя столбца$);
			в то времякак($результат->>выборка())
			{
				array_push($строки[1], 1);
				array_push($строки[1], $Имя столбца);
				array_push($имена столбцов, $Имя столбца);
			}
			$результат->>закрыть();
			array_push($строки[0], количество($имена столбцов));
			array_push($строки[0], $этапы[$idx]["имя"]);
			в то времякак($db_connection->>next_result()) $db_connection->>store_result();
		}

 для($idx=0;$idx<количество($этапов);$idx++)
		{
			$cnt = 2;
			$результат = $db_connection->>подготовка("вызов fillReport_getStageReport(? ,?)");
			$результат->>bind_param('ii', $EmployeeID, $этапы[$idx]["идентификатор"]);
			$результат->>выполнить();
			$meta = $результат->>result_metadata();
			в то время как ($field = $meta->>fetch_field()) 
			{ 
				$параметры[] = &$строка[$поле->>имя];
			}
			call_user_func_array(массив($результат, 'bind_result'), $параметры);
			
			в то время как ($результат->>выборка()) 
			{
				если($idx==0)
				{
					$строки[$cnt] = массив();
				}
				$rcnt = 0;
				для каждого($строка как $ключ => >$val) 
				{
					если($idx==0 || $rcnt>=>количество(имена строк$))
					{
						если($val!=")
							array_push($строки[$cnt],$val);
					}
					$rcnt++;
				}
				$cnt++;
			}
			$результат->>закрыть();
			
			в то времякак($db_connection->>next_result()) $db_connection->>store_result();
		}

		$out .= '<класс таблицы="элемент">'<класс таблицы="элемент">;
		$out .= '<tr>';
		$out .= '<th rowspan=2 colspan='.$строки[0][0].'>'>.$строки[0][1].'</th>'</th>;
 для($i=2;$i<количество($строк[0]);$i+=2)
		{
			$out .= '<th rowspan=1 colspan='.$строки[0][$i].'>'>.$строки[0][$i+1].'</th>'</th>;
		}
		$out .= '</tr>';
		$out .= '<tr>';
 для($i=0;$i<количество($строк[1]);$i+=2)
		{
			$out .= '<th colspan='.$строки[1][$i].'>'>.$строки[1][$i+1].'</th>'</th>;
		}
		$out .= '</tr>';
 для($i=2;$i<количество($строк);$i++)
		{
			$out .= '<tr>';
 для($j=0;$j<количество($строк[$i]);$j++)
			{
				$out .= '<td>'<td>.$строки[$i][$j].'</td>'</td>;
			}
			$out .= '</tr>';
		}
		$out .= '</таблица>'</таблица>;
		эхо $из;
		
		перерыв;

	регистр 'GET_FORMHEADER':
		$ProjectID = $_REQUEST['ProjectID'];
		$stageId = $_REQUEST['stageId'];
		
		$sql = "вызов data_getFormHeader (?, ?);";
		$результат = $db_connection->>подготовка($sql);
		$результат->>bind_param('ii', $ProjectID, $stageId);
		$result->execute();
		
		$result->bind_result($id, $caption, $field, $editor, $type, $mandatory, $listId);

		$obj = array("columns" => array());
		$obj['fields'] = array();

		array_push($obj['columns'], array(header => 'id'));
		$obj['columns'][count($obj['columns'])-1]['hidden'] = true;
		$obj['columns'][count($obj['columns'])-1]['dataIndex'] = 'id';
		array_push($obj['fields'], array(name => 'id'));
		//$obj['fields'][count($obj['fields'])-1]['type'] = 'integer';
		
		
		array_push($obj['columns'], array(header => 'Бренд'));
		$obj['columns'][count($obj['columns'])-1]['dataIndex'] = 'name';
		array_push($obj['fields'], array(name => 'name'));
		//$obj['fields'][count($obj['fields'])-1]['type'] = 'string';
		
		while ($result->fetch()) {
			array_push($obj['fields'], array(name => $field));
			//$obj['fields'][count($obj['fields'])-1]['type'] = $type;
			
			array_push($obj['columns'], array(header => $caption));
			$obj['columns'][count($obj['columns'])-1]['dataIndex'] = $field;
			$obj['columns'][count($obj['columns'])-1]['width'] = 'auto';
			if ($editor == 1){
				$xtype = ($type == "integer" || $type == "double" || $type == "string" || $type == "numeric" ? "textfield" : $type);
				$obj['columns'][count($obj['columns'])-1]['editor'] = new StdClass();
				$obj['столбцы'][количество($obj['столбцы'])-1]['редактор']->>xtype = $xtype;
				$obj['столбцы'][количество($obj['столбцы'])-1]['редактор']->>allowBlank = !(bool)$обязательно;
				если ($xtype == "комбинированный"){
					$obj['столбцы'][количество($obj['столбцы'])-1]['редактор']->>Список = $Список;
				}
			}
		}
		
		$результат->>закрыть();
		
		перерыв;

	случай 'GET_LIST':
		$ListID = $_REQUEST['Список'];
		
		$результат = $db_connection->>подготовка("список вызовов(?)");
		$результат->>bind_param('i', $ListID);
		$результат->>выполнить();
		$результат->>bind_result($идентификатор, $имя);
		
		$obj = массив("записи" => >массив()); 
		
		в то времякак($результат->>выборка())
		{
			array_push($obj['записи'], массив(идентификатор строки => >$id, имя => >$имя));
		}
		$результат->>закрыть();
		перерыв;
}

если (isset($obj)){
	echo json_encode($obj);
}

$db_connection->>закрыть();
